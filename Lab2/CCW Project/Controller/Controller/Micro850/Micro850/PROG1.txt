(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
_IO_EM_DO_00 := MOTOR_START AND NOT(MOTOR_INTERUPT) ;

(*************** Code for the end of Rung **************)
__GL __LG0001 ;


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,3
__ENDSTEPPRAGMA
(*Label :*)(**)
_IO_EM_DO_01 := MOTOR_DIRECTION ;

(*************** Code for the end of Rung **************)
__GL __LG0002 ;


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,5
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB2 := TRUE ;
IF __EDTB2 THEN
(* Operator output on : = with __EDTB1 *)
__EDTB1 := (SPEED_CONTROL = SPEED_LOW) ;
ELSE
__EDTB1 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB1 ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
DUTYCYCLE := (CYCLE * 0.1) ;
END_IF ;
__MO_MULT_1 := __EDTB3 ;

(*************** Code for the end of Rung **************)
__GL __LG0003 ;


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,9
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB5 := TRUE ;
IF __EDTB5 THEN
(* Operator output on : = with __EDTB4 *)
__EDTB4 := (SPEED_CONTROL = SPEED_MEDIUM) ;
ELSE
__EDTB4 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB4 ;
__EDTB6 := __EDTB4 ;
IF __EDTB6 THEN
DUTYCYCLE := (CYCLE * 0.2) ;
END_IF ;
__MO_MULT_2 := __EDTB6 ;

(*************** Code for the end of Rung **************)
__GL __LG0004 ;


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB8 := TRUE ;
IF __EDTB8 THEN
(* Operator output on : = with __EDTB7 *)
__EDTB7 := (SPEED_CONTROL = SPEED_HIGH) ;
ELSE
__EDTB7 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB7 ;
__EDTB9 := __EDTB7 ;
IF __EDTB9 THEN
DUTYCYCLE := (CYCLE * 1.0) ;
END_IF ;
__MO_MULT_3 := __EDTB9 ;

(*************** Code for the end of Rung **************)
__GL __LG0005 ;


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,17
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := TRUE ;
IF __EDTB10 THEN
DUTY_CYCLE_MS := ANY_TO_TIME(DUTYCYCLE) ;
END_IF ;
__MO_ANY_TO_TIME_1 := __EDTB10 ;

(*************** Code for the end of Rung **************)
__GL __LG0006 ;


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,20
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB11 := TRUE ;
IF __EDTB11 THEN
OFFDELAY := (CYCLE - DUTYCYCLE) ;
END_IF ;
__MO_MINUS_1 := __EDTB11 ;
__EDTB12 := __EDTB11 ;
IF __EDTB12 THEN
OFFDELAY_MS := ANY_TO_TIME(OFFDELAY) ;
END_IF ;
__MO_ANY_TO_TIME_2 := __EDTB12 ;

(*************** Code for the end of Rung **************)
__GL __LG0007 ;


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TONOFF *)
TONOFF_1(_IO_EM_DO_00, DUTY_CYCLE_MS, OFFDELAY_MS) ;
MOTOR_INTERUPT := TONOFF_1.Q ;

(*************** Code for the end of Rung **************)
__GL __LG0008 ;


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)

